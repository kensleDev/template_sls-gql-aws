directive @embedded on OBJECT

directive @collection(name: String!) on OBJECT

directive @index(name: String!) on FIELD_DEFINITION

directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION

directive @relation(name: String) on FIELD_DEFINITION

directive @unique(index: String) on FIELD_DEFINITION

"""'ConvoFeed' input values"""
input ConvoFeedInput {
  userId: ID!
  convos: [ID]
}

"""'Convo' input values"""
input ConvoInput {
  convoId: ID!
  participants: [String]
  msgs: [ID]
  convoFeeds: [ID]
}

scalar Date

"""
Allow manipulating the relationship between the types 'Msg' and 'Convo' using the field 'Msg.convo'.
"""
input MsgConvoRelation {
  """
  Create a document of type 'Convo' and associate it with the current document.
  """
  create: ConvoInput

  """
  Connect a document of type 'Convo' with the current document using its ID.
  """
  connect: ID

  """If true, disconnects this document from 'Convo'"""
  disconnect: Boolean
}

"""'Msg' input values"""
input MsgInput {
  msgId: ID!
  sender: MsgSenderRelation
  content: String!
  status: MsgStatus!
  readBy: [ID]
  createdAt: String!
  updatedAt: String!
  deleteAt: String!
  convo: MsgConvoRelation
}

"""
Allow manipulating the relationship between the types 'Msg' and 'User' using the field 'Msg.sender'.
"""
input MsgSenderRelation {
  """
  Create a document of type 'User' and associate it with the current document.
  """
  create: UserInput

  """
  Connect a document of type 'User' with the current document using its ID.
  """
  connect: ID
}

type Mutation {
  """Update an existing document in the collection of 'User'"""
  updateUser(
    """The 'User' document's ID"""
    id: ID!

    """'User' input values"""
    data: UserInput!
  ): User

  """Delete an existing document in the collection of 'Msg'"""
  deleteMsg(
    """The 'Msg' document's ID"""
    id: ID!
  ): Msg
  createUser(userId: ID!, userName: String!, avatar: String): User!

  """Delete an existing document in the collection of 'Convo'"""
  deleteConvo(
    """The 'Convo' document's ID"""
    id: ID!
  ): Convo

  """Create a new document in the collection of 'Convo'"""
  createConvo(
    """'Convo' input values"""
    data: ConvoInput!
  ): Convo!

  """Create a new document in the collection of 'ConvoFeed'"""
  createConvoFeed(
    """'ConvoFeed' input values"""
    data: ConvoFeedInput!
  ): ConvoFeed!
  createMsg(msgId: String!, sender: String!, content: String!, status: MsgStatus!, readBy: String!, createdAt: String!, updatedAt: String!): Msg!

  """Delete an existing document in the collection of 'ConvoFeed'"""
  deleteConvoFeed(
    """The 'ConvoFeed' document's ID"""
    id: ID!
  ): ConvoFeed

  """Delete an existing document in the collection of 'User'"""
  deleteUser(
    """The 'User' document's ID"""
    id: ID!
  ): User
  updateMsg(msgId: String!, content: String, status: MsgStatus, readBy: String, updatedAt: String): Msg

  """Update an existing document in the collection of 'ConvoFeed'"""
  updateConvoFeed(
    """The 'ConvoFeed' document's ID"""
    id: ID!

    """'ConvoFeed' input values"""
    data: ConvoFeedInput!
  ): ConvoFeed

  """Update an existing document in the collection of 'Convo'"""
  updateConvo(
    """The 'Convo' document's ID"""
    id: ID!

    """'Convo' input values"""
    data: ConvoInput!
  ): Convo
}

scalar Time

"""'User' input values"""
input UserInput {
  userId: ID!
  userName: String!
  avatar: String
}

type Convo {
  """The document's ID."""
  _id: ID!
  participants: [String]
  convoId: ID!
  convoFeeds: [ConvoFeed]
  msgs: [Msg]

  """The document's timestamp."""
  _ts: Long!
}

type ConvoFeed {
  """The document's ID."""
  _id: ID!

  """The document's timestamp."""
  _ts: Long!
  userId: ID!
  convos: [Convo]
}

type Msg {
  updatedAt: String!
  deleteAt: String!

  """The document's ID."""
  _id: ID!
  convo: Convo
  msgId: ID!
  status: MsgStatus!
  createdAt: String!
  content: String!
  sender: User!
  readBy: [ID]

  """The document's timestamp."""
  _ts: Long!
}

"""The pagination object for elements of type 'Msg'."""
type MsgPage {
  """The elements of type 'Msg' in this page."""
  data: [Msg]!

  """A cursor for elements coming after the current page."""
  after: String

  """A cursor for elements coming before the current page."""
  before: String
}

enum MsgStatus {
  LOCAL
  SERVER
  DELIVERED
  READ
}

type Query {
  convoFeedByUserId(userId: ID!): ConvoFeed!
  msgByCreated(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
    createdAt: String!
  ): MsgPage!
  msgByUserId(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
    userId: String!
  ): MsgPage!
  msgById(
    """The number of items to return per page."""
    _size: Int

    """The pagination cursor."""
    _cursor: String
    msgId: ID!
  ): MsgPage!

  """Find a document from the collection of 'Msg' by its id."""
  findMsgByID(
    """The 'Msg' document's ID"""
    id: ID!
  ): Msg

  """Find a document from the collection of 'User' by its id."""
  findUserByID(
    """The 'User' document's ID"""
    id: ID!
  ): User
  convoById(convoId: ID!): Convo!

  """Find a document from the collection of 'Convo' by its id."""
  findConvoByID(
    """The 'Convo' document's ID"""
    id: ID!
  ): Convo

  """Find a document from the collection of 'ConvoFeed' by its id."""
  findConvoFeedByID(
    """The 'ConvoFeed' document's ID"""
    id: ID!
  ): ConvoFeed
  userById(userId: ID!): User!
}

type User {
  avatar: String

  """The document's ID."""
  _id: ID!
  userId: ID!
  userName: String!

  """The document's timestamp."""
  _ts: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long
