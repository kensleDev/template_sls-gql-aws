type User {
  userId: ID @unique
  username: String @unique
  avatar: String
  role: UserRole!
}

enum UserRole {
  ADMIN
  USER
}

input CreateUserInput {
  username: String!
  password: String!
  role: UserRole!
  avatar: String
}

input UpdateUserInput {
  id: ID!
  username: String
  password: String
  role: UserRole
  avatar: String
}

input LoginUserInput {
  username: String!
  password: String!
}

# type Query {
#   userById(userId: ID!): User!
# }

type Mutation {
  createUser(input: CreateUserInput!): User! @resolver
  updateUser(input: UpdateUserInput): User! @resolver
  deleteUser(input: ID!): User @resolver

  loginUser(input: LoginUserInput): String! @resolver
  logoutUser(input: ID!): String! @resolver
}

# enum MsgStatus {
#   LOCAL
#   SERVER
#   DELIVERED
#   READ
# }

# type Msg {
#   msgId: ID! @unique
#   sender: User!
#   content: String!
#   status: MsgStatus!
#   readBy: [ID]

#   createdAt: String!
#   updatedAt: String!
#   deleteAt: String!

#   convo: Convo
# }

# type Convo {
#   convoId: ID! @unique
#   participants: [String]
#   msgs: [Msg]
#   convoFeeds: [ConvoFeed]
# }

# type ConvoFeed {
#   userId: ID! @unique
#   convos: [Convo]
# }

# type Query {
# msgById(msgId: ID!): [Msg!]!
# convoFeedByUserId(userId: ID!): ConvoFeed!
# convoById(convoId: ID!): Convo!
# userById(userId: ID!): User!
# }

# type Mutation {
#   createMsg(
#     msgId: String!
#     sender: String!
#     content: String!
#     status: MsgStatus!
#     readBy: String!
#     createdAt: String!
#     updatedAt: String!
#   ): Msg! @resolver

#   updateMsg(
#     msgId: String!
#     content: String
#     status: MsgStatus
#     readBy: String
#     updatedAt: String
#   ): Msg @resolver
# }
